## ams_version=1.0

Model Main_CarSelection {
	Section Data_Model {
		Section Quantities_and_Units {
			Comment: {
				"This section contains all the units and quantities that are added automatically by AIMMS.
				It is recommended to declare all your quantities here."
			}
			Quantity SI_Time_Duration {
				BaseUnit: s;
				Conversions: minute->s : #-># * 60;
				Comment: {
					"Expresses the value for the duration of periods.
					
					The unit s has been added automatically because it is a required unit for AimmsWebUI.
					
					The unit minute has been added automatically because it is a required unit for AimmsWebUI."
				}
			}
			Quantity SI_Mass {
				BaseUnit: kg;
				Comment: "Expresses the value for the amount of matter.";
			}
			Quantity q_monetary {
				BaseUnit: $;
			}
		}
		Section Inputs {
			Set s_producers {
				Text: "The set of all producers";
				Index: i_p, i_p1;
			}
			Set s_contracts {
				Text: "The set of all contracts";
				Index: i_c, i_c1;
				Parameter: ep_contract;
			}
			Parameter p_availableCapacity {
				IndexDomain: (i_p);
				Text: "Available capacity for producer p";
				Unit: kg;
				webui::AnnotationsIdentifier: sp_producersIndexedAnnotation;
			}
			Parameter p_productionCost {
				IndexDomain: (i_p,i_c);
				Text: "Unit cost for delivery by producer p for contract c";
				Unit: $/kg;
				webui::AnnotationsIdentifier: sp_contractsProducersIndexedAnnotation;
			}
			Parameter p_minimalDelivery {
				IndexDomain: (i_p);
				Text: "Minimal delivery size for producer p";
				Unit: kg;
				webui::AnnotationsIdentifier: sp_producersIndexedAnnotation;
			}
			Parameter p_contractSize {
				IndexDomain: (i_c);
				Text: "Size of contract c";
				Unit: kg;
				webui::AnnotationsIdentifier: sp_contractsIndexedAnnotation;
			}
			Parameter p_minimalNumberofContributors {
				IndexDomain: (i_c);
				Text: "Minimal number of producers that delivery to a contract";
				Range: integer;
				webui::AnnotationsIdentifier: sp_contractsIndexedAnnotation;
			}
		}
		Section Math_Model {
			Variable v_totalCost {
				Text: "Total cost of all deliveries";
				Unit: $;
				Definition: sum((i_p,i_c), p_productionCost(i_p,i_c) * v_generation(i_p,i_c));
			}
			Variable v_generation {
				IndexDomain: (i_p,i_c);
				Text: "Amount of commodity delivered by producers p for contract c";
				Range: [p_minimalDelivery(i_p), 10000);
				Unit: kg;
				Property: SemiContinuous;
			}
			Variable v_generationIncidence {
				IndexDomain: (i_p,i_c);
				Text: "Producers p produce for contract c";
				Range: binary;
			}
			Constraint c_capacity {
				IndexDomain: (i_p);
				Text: "Production capacity for producer p";
				Unit: kg;
				Definition: sum(i_c, v_generation(i_p,i_c)) <= p_availableCapacity(i_p);
			}
			Constraint c_contractFullfillment {
				IndexDomain: (i_c);
				Text: "The demand for contract c is met";
				Unit: kg;
				Definition: sum(i_p, v_generation(i_p,i_c)) >= p_contractSize(i_c);
			}
			Constraint c_contractContribution {
				IndexDomain: (i_c);
				Text: "Mimimal number of contributors to contract c";
				Definition: sum(i_p, v_generationIncidence(i_p,i_c)) >= p_minimalNumberofContributors(i_c);
			}
			Constraint c_generationIncidenceDetermination {
				IndexDomain: (i_p,i_c);
				Text: "Determine if producer p delivers to contract c";
				Unit: kg;
				Definition: v_generation(i_p,i_c) >= p_minimalDelivery(i_p) * v_generationIncidence(i_p,i_c);
			}
			MathematicalProgram mp_contractAllocation {
				Objective: v_totalCost;
				Direction: minimize;
				Constraints: AllConstraints;
				Variables: AllVariables;
				Type: MIP;
			}
		}
	}
	Section UI_Declarations {
		StringParameter sp_logo {
			Definition: "aimms_logo.png";
		}
		ElementParameter ep_actualProducer {
			Text: "Element parameter used to link Gantt chart with message";
			Range: s_producers;
		}
		ElementParameter ep_actualContract {
			Text: "Element parameter used to link Gantt chart with message";
			Range: s_contracts;
		}
		StringParameter sp_messageString {
			Text: "A message describing the production of a certain producer for a certain contract";
			Definition: {
				FormatString("Total delivery by producer %e for contract %e is %n",
				ep_actualProducer, ep_actualContract, v_generation(ep_actualProducer, ep_actualContract))
			}
		}
		ElementParameter ep_generationColor {
			IndexDomain: (i_p,i_c);
			Text: "Display message in color, based on the amount of generation in relation to the bounds";
			Range: AllColors;
			Definition: {
				if sum(i_c1, v_generation(i_p,i_c1)) = p_availableCapacity(i_p) and v_generation(i_p,i_c) = p_minimalDelivery(i_p) then
					    'red'
				elseif  sum(i_c1, v_generation(i_p,i_c1)) = p_availableCapacity(i_p) then
					    'magenta'
				elseif  v_generation(i_p,i_c) = p_minimalDelivery(i_p) then
					    'blue'
				else
					    'Black'
				endif;
			}
		}
		Section Annotations {
			StringParameter sp_producersIndexedAnnotation {
				IndexDomain: i_p;
				Definition: {
					if i_p = ep_actualProducer then
						"bkg-lightblue"
					endif
				}
			}
			StringParameter sp_contractsIndexedAnnotation {
				IndexDomain: i_c;
				Definition: {
					if i_c = ep_actualContract then
						"bkg-lightblue"
					endif
				}
			}
			StringParameter sp_contractsProducersIndexedAnnotation {
				IndexDomain: (i_p,i_c);
				Definition: {
					if i_c = ep_actualContract and i_p = ep_actualProducer then
						"bkg-lightblue"
					endif
				}
			}
		}
		Section Workflow {
			StringParameter sp_myWorkflows {
				IndexDomain: (webui::indexWorkflowOrder,webui::indexWorkflowSpec);
			}
			StringParameter sp_myWorkflowSteps {
				IndexDomain: (webui::indexWorkflowOrder,webui::indexNoOfPages,webui::indexWorkflowPageSpec);
				Definition: {
					data 
					{ ( 1, 1, displayText       ) : "Welcome"            ,  ( 1, 1, icon              ) : "aimms-happy"        ,
					  ( 1, 1, pageId            ) : "home"               ,  ( 1, 1, tooltip           ) : "Problem Description",
					  ( 1, 1, workflowPageState ) : "Active"             ,  ( 1, 1, pageDataState     ) : "Incomplete"         ,
					  ( 1, 1, redirectPageId    ) : "home"               ,  ( 1, 2, displayText       ) : "Problem Description",
					  ( 1, 2, icon              ) : "aimms-lamp5"        ,  ( 1, 2, pageId            ) : "problem_description",
					  ( 1, 2, tooltip           ) : "Problem Description",  ( 1, 2, workflowPageState ) : "Active"             ,
					  ( 1, 2, pageDataState     ) : "Incomplete"         ,  ( 1, 2, redirectPageId    ) : "home"               ,
					  ( 1, 3, displayText       ) : "Demo Page"          ,  ( 1, 3, icon              ) : "aimms-equalizer2"   ,
					  ( 1, 3, pageId            ) : "inputs"             ,  ( 1, 3, tooltip           ) : "Demo Page"          ,
					  ( 1, 3, workflowPageState ) : "Active"             ,  ( 1, 3, pageDataState     ) : "Incomplete"         ,
					  ( 1, 3, redirectPageId    ) : "home"                }
				}
			}
		}
		Section SidePanel {
			DeclarationSection DemoPage {
				StringParameter sp_demoPageSidePanel {
					IndexDomain: (webui::indexPageExtension,webui::indexSidePanelSpec);
					Definition: {
						data 
						{ ( 1, displayText ) : "KPIs"   ,  ( 1, pageId      ) : "informations"         ,  ( 1, tooltip     ) : "frubas"        ,
						  ( 1, icon        ) : "aimms-question" }
					}
				}
			}
		}
		Section Lists {
			DeclarationSection DemoPageSidePanel {
				StringParameter sp_myListsGroups {
					IndexDomain: (webui::indexListGroupOrder,webui::indexListGroupSpec);
					Definition: data { ( 1, title ) : "KPI",  ( 2, title ) : "Legend" };
				}
				StringParameter sp_myListGroupItems {
					IndexDomain: (webui::indexListGroupOrder,webui::indexNoOfListItems,webui::indexListGroupItemsSpec);
					Definition: {
						{( '1', '1', 'icon'  ) : "aimms-circle2",  
						( '1', '1', 'color' ) : FormatString("%e", ep_generationColor(ep_actualProducer,ep_actualContract)),  
						( '1', '1', 'text'  ) : FormatString("Total delivery by producer %e for contract %e is %n.", ep_actualProducer, ep_actualContract, v_generation(ep_actualProducer, ep_actualContract)),
						( '1', '1', 'state' ) : "active"        ,
						( '2', '1', 'icon'  ) : "aimms-circle2",
						( '2', '1', 'color' ) : "red",
						( '2', '1', 'text'  ) : "Red indicates that all capacity is used and the amount of delivery is minimal.",
						( '2', '1', 'state' ) : "active",
						( '2', '2', 'icon'  ) : "aimms-circle2",
						( '2', '2', 'color' ) : "magenta",
						( '2', '2', 'text'  ) : "Magenta indicates that all capacity is used. ",
						( '2', '2', 'state' ) : "active",
						( '2', '3', 'icon'  ) : "aimms-circle2",
						( '2', '3', 'color' ) : "blue",
						( '2', '3', 'text'  ) : "Blue indicates that the amount of delivery is minimal. Black in all remaining situations.",
						(' 2', '3', 'state' ) : "active" ,
						( '2', '4', 'icon'  ) : "aimms-circle2",
						( '2', '4', 'color' ) : "black",
						( '2', '4', 'text'  ) : "Otherwise.",
						(' 2', '4', 'state' ) : "active" }
					}
				}
			}
		}
		Section FlagsIdentifier {
			StringParameter sp_readOnlyFlag {
				Definition: "readonly";
			}
		}
	}
	Procedure MainInitialization {
		Body: {
			read from file "<prj>:NothWesternStates.txt";
			ep_actualContract := first(i_c);
			ep_actualProducer := first(i_p);
		}
		Comment: "Add initialization statements here that do NOT require any library being initialized already.";
	}
	Procedure PostMainInitialization {
		Comment: {
			"Add initialization statements here that require that the libraries are already initialized properly,
			or add statements that require the Data Management module to be initialized."
		}
	}
	Procedure MainExecution {
		Body: {
			solve mp_contractAllocation;
		}
	}
	Procedure PreMainTermination {
		Body: {
			return DataManagementExit();
		}
		Comment: {
			"Add termination statements here that require all libraries to be still alive.
			Return 1 if you allow the termination sequence to continue.
			Return 0 if you want to cancel the termination sequence."
		}
	}
	Procedure MainTermination {
		Body: {
			return 1;
		}
		Comment: {
			"Add termination statements here that do not require all libraries to be still alive.
			Return 1 to allow the termination sequence to continue.
			Return 0 if you want to cancel the termination sequence.
			It is recommended to only use the procedure PreMainTermination to cancel the termination sequence and let this procedure always return 1."
		}
	}
	Section tobedone {
		StringParameter sp_problemDescription {
			Definition: FileRead("Description.txt");
		}
	}
}
