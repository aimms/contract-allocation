## ams_version=1.0

Model Main_ContractAllocation {
	Section Data_Model {
		Section Quantities_and_Units {
			Comment: {
				"This section contains all the units and quantities that are added automatically by AIMMS.
				It is recommended to declare all your quantities here."
			}
			Quantity SI_Time_Duration {
				BaseUnit: s;
				Conversions: minute->s : #-># * 60;
				Comment: {
					"Expresses the value for the duration of periods.
					
					The unit s has been added automatically because it is a required unit for AimmsWebUI.
					
					The unit minute has been added automatically because it is a required unit for AimmsWebUI."
				}
			}
			Quantity SI_Mass {
				BaseUnit: kg;
				Comment: "Expresses the value for the amount of matter.";
			}
			Quantity q_monetary {
				BaseUnit: $;
			}
			Quantity SI_Unitless {
				BaseUnit: -;
				Conversions: % -> - : # -> # / 100;
				Comment: "Expresses a dimensionless value.";
			}
		}
		Section Inputs {
			Section Producers {
				Set s_producers {
					Text: "The set of all producers";
					Index: i_producer;
					dex::FieldName: Producer;
				}
				Parameter p_availableCapacity {
					IndexDomain: (i_producer);
					Text: "Available capacity for producer p";
					Range: nonnegative;
					Unit: kg;
					InitialData: 0;
					webui::AnnotationsIdentifier: p_availableCapacityAnnotation;
				}
				Parameter p_minimalDelivery {
					IndexDomain: (i_producer);
					Text: "Minimal delivery size for producer p";
					Range: nonnegative;
					Unit: kg;
					InitialData: 0;
					webui::AnnotationsIdentifier: p_minimalDeliveryAnnotation;
				}
			}
			Section Contracts {
				Set s_contracts {
					Text: "The set of all contracts";
					Index: i_contract, i_contract1;
					Parameter: ep_contract;
				}
				Parameter p_minimumContractFulfillment {
					IndexDomain: (i_contract);
					Text: "Min of contract c";
					Range: nonnegative;
					Unit: kg;
					InitialData: 0;
					webui::AnnotationsIdentifier: sp_minimumContractFulfillmentAnnotation;
				}
				Parameter p_maximumContractFulfillment {
					IndexDomain: (i_contract);
					Text: "Max of contract c";
					Range: nonnegative;
					Unit: kg;
					Default: inf;
					InitialData: inf;
					webui::AnnotationsIdentifier: sp_maximumContractFulfillmentAnnotation;
				}
				Parameter p_minimalNumberofContributors {
					IndexDomain: (i_contract);
					Text: "Minimal number of producers that delivery to a contract";
					Range: integer;
					InitialData: 0;
					webui::AnnotationsIdentifier: sp_minimalNumberofContributorsAnnotation;
				}
			}
			DeclarationSection Production_Cost {
				Parameter p_productionCost {
					IndexDomain: (i_producer,i_contract);
					Text: "Unit cost for delivery by producer p for contract c";
					Unit: $/kg;
					InitialData: 0;
					webui::AnnotationsIdentifier: sp_productionCostAnnotation;
				}
			}
		}
		Section Math_Model {
			Variable v_totalCost {
				Text: "Total cost of all deliveries";
				Unit: $;
				Definition: sum((i_producer,i_contract), p_productionCost(i_producer,i_contract) * v_generation(i_producer,i_contract));
			}
			Variable v_generation {
				IndexDomain: (i_producer,i_contract);
				Text: "Amount of commodity delivered by producers p for contract c";
				Range: [p_minimalDelivery(i_producer), 10000);
				Unit: kg;
				Property: SemiContinuous;
			}
			Variable v_generationIncidence {
				IndexDomain: (i_producer,i_contract);
				Text: "Producers p produce for contract c";
				Range: binary;
			}
			Constraint c_capacity {
				IndexDomain: (i_producer);
				Text: "Production capacity for producer p";
				Unit: kg;
				Definition: {
					sum(i_contract, v_generation(i_producer,i_contract)) 
					<= 
					p_availableCapacity(i_producer)
				}
			}
			Constraint c_minimumContractFullfillment {
				IndexDomain: (i_contract);
				Text: "The demand for contract c is met";
				Unit: kg;
				Definition: {
					sum(i_producer, v_generation(i_producer,i_contract)) 
					>= 
					p_minimumContractFulfillment(i_contract)
				}
			}
			Constraint c_maximumContractFullfillment {
				IndexDomain: (i_contract);
				Text: "The demand for contract c is met";
				Unit: kg;
				Definition: {
					sum(i_producer, v_generation(i_producer,i_contract)) 
					<= 
					p_maximumContractFulfillment(i_contract)
				}
			}
			Constraint c_contractContribution {
				IndexDomain: (i_contract);
				Text: "Mimimal number of contributors to contract c";
				Definition: {
					sum(i_producer, v_generationIncidence(i_producer,i_contract)) 
					>= 
					p_minimalNumberofContributors(i_contract)
				}
			}
			Constraint c_generationIncidenceDetermination {
				IndexDomain: (i_producer,i_contract);
				Text: "Determine if producer p delivers to contract c";
				Unit: kg;
				Definition: {
					v_generation(i_producer,i_contract) 
					>= 
					p_minimalDelivery(i_producer) 
					* 
					v_generationIncidence(i_producer,i_contract)
				}
			}
			MathematicalProgram mp_contractAllocation {
				Objective: v_totalCost;
				Direction: minimize;
				Constraints: AllConstraints;
				Variables: AllVariables;
				Type: MIP;
			}
			DeclarationSection Model_Information {
				ElementParameter ep_programStatus {
					Range: AllSolutionStates;
					webui::FlagsIdentifier: sp_readOnlyFlag;
				}
				Parameter p_gap {
					webui::FlagsIdentifier: sp_readOnlyFlag;
				}
				Parameter p_numberOfConstraints {
					webui::FlagsIdentifier: sp_readOnlyFlag;
				}
				Parameter p_numberOfVariables {
					webui::FlagsIdentifier: sp_readOnlyFlag;
				}
				Parameter p_solutionTime {
					Unit: s;
					Property: NoSave;
					InitialData: 0;
					webui::FlagsIdentifier: sp_readOnlyFlag;
				}
			}
			Procedure pr_modelInformation {
				Body: {
					empty Model_Information;
					
					ep_programStatus := mp_contractAllocation.ProgramStatus;
					p_gap := abs(1 - (mp_contractAllocation.Objective /$ mp_contractAllocation.BestBound));
					p_solutionTime := mp_contractAllocation.SolutionTime;
					p_numberOfConstraints := mp_contractAllocation.NumberOfConstraints;
					p_numberOfVariables := mp_contractAllocation.NumberOfVariables;
				}
			}
		}
		Section Outputs {
			Parameter p_def_actualnumberOfContributors {
				IndexDomain: i_contract;
				Definition: sum(i_producer | v_generation(i_producer, i_contract), 1);
			}
			Parameter p_def_minNumberOfContributors {
				IndexDomain: i_contract;
				Definition: p_minimalNumberofContributors(i_contract);
			}
			Parameter p_def_totalDelivery {
				IndexDomain: i_producer;
				Unit: kg;
				Definition: sum(i_contract, v_generation(i_producer,i_contract));
			}
			Parameter p_def_availableCapacity {
				IndexDomain: i_producer;
				Unit: kg;
				Definition: p_availableCapacity(i_producer);
			}
			Parameter p_def_minimalDelivery {
				IndexDomain: i_producer;
				Unit: kg;
				Definition: p_minimalDelivery(i_producer);
			}
			Parameter p_def_minimumContractFulfillment {
				IndexDomain: (i_contract);
				Text: "Min of contract c";
				Range: nonnegative;
				Unit: kg;
				Definition: p_minimumContractFulfillment(i_contract);
			}
			Parameter p_def_maximumContractFulfillment {
				IndexDomain: (i_contract);
				Text: "Max of contract c";
				Range: nonnegative;
				Unit: kg;
				Default: inf;
				Definition: p_maximumContractFulfillment(i_contract);
			}
			Parameter p_def_actualContractFulfillment {
				IndexDomain: (i_contract);
				Range: nonnegative;
				Unit: kg;
				Definition: sum(i_producer, v_generation(i_producer,i_contract));
			}
		}
	}
	Section UI_Declarations {
		Procedure pr_empty;
		StringParameter sp_logo {
			Definition: "aimms_logo.png";
		}
		ElementParameter ep_actualProducer {
			Text: "Element parameter used to link Gantt chart with message";
			Range: s_producers;
			InitialData: '';
		}
		ElementParameter ep_actualContract {
			Text: "Element parameter used to link Gantt chart with message";
			Range: s_contracts;
			InitialData: '';
		}
		Section Workflow {
			StringParameter sp_myWorkflows {
				IndexDomain: (webui::indexWorkflowOrder,webui::indexWorkflowSpec);
			}
			StringParameter sp_myWorkflowSteps {
				IndexDomain: (webui::indexWorkflowOrder,webui::indexNoOfPages,webui::indexWorkflowPageSpec);
				Definition: {
					data 
					{ ( 1, 1, displayText       ) : "Welcome"            ,  ( 1, 1, icon              ) : "aimms-happy"        ,
					  ( 1, 1, pageId            ) : "home"               ,  ( 1, 1, tooltip           ) : "welcome"            ,
					  ( 1, 1, workflowPageState ) : "active"             ,  ( 1, 1, pageDataState     ) : "Incomplete"         ,
					  ( 1, 1, redirectPageId    ) : "problem_description",  ( 1, 2, displayText       ) : "Story"              ,
					  ( 1, 2, icon              ) : "aimms-lamp5"        ,  ( 1, 2, pageId            ) : "problem_description",
					  ( 1, 2, tooltip           ) : "Problem description",  ( 1, 2, workflowPageState ) : "active"             ,
					  ( 1, 2, pageDataState     ) : "incomplete"         ,  ( 1, 2, redirectPageId    ) : "home"               ,
					  ( 1, 3, displayText       ) : "Inputs"             ,  ( 1, 3, icon              ) : "aimms-equalizer2"   ,
					  ( 1, 3, pageId            ) : "inputs"             ,  ( 1, 3, tooltip           ) : "Input data"         ,
					  ( 1, 3, workflowPageState ) : "active"             ,  ( 1, 3, pageDataState     ) : "incomplete"         ,
					  ( 1, 3, redirectPageId    ) : "home"               ,  ( 1, 4, displayText       ) : "Results"            ,
					  ( 1, 4, icon              ) : "aimms-make-group"   ,  ( 1, 4, pageId            ) : "results"            ,
					  ( 1, 4, tooltip           ) : "Model outputs"      ,  ( 1, 4, workflowPageState ) : "active"             ,
					  ( 1, 4, pageDataState     ) : "Incomplete"         ,  ( 1, 4, redirectPageId    ) : "home"                }
				}
			}
		}
		Section Pages {
			Section Input_Page {
				DeclarationSection Input_Annotations {
					StringParameter sp_minimalNumberofContributorsAnnotation {
						IndexDomain: i_contract;
						Definition: {
							if (i_contract = ep_actualContract
							    and p_minimalNumberofContributors(ep_actualContract) = 0) then
								"bkg-cell-default"
							
							elseif (i_contract = ep_actualContract
							    and p_minimalNumberofContributors(ep_actualContract) <> 0) then
								"bkg-cell"
							
							endif
						}
						Comment: {
							"or  
							    (i_contract = ep_actualContract
							    and p_contractSize(ep_actualContract) = 0[kg]) 
							
							    or  
							    (i_contract = ep_actualContract
							    and p_contractSize(ep_actualContract) <> 0[kg])"
						}
					}
					StringParameter sp_minimumContractFulfillmentAnnotation {
						IndexDomain: i_contract;
						Definition: {
							if (i_contract = ep_actualContract
							    and p_minimumContractFulfillment(ep_actualContract) = 0[kg]) then
								"bkg-cell-default"
							
							elseif (i_contract = ep_actualContract
							    and p_minimumContractFulfillment(ep_actualContract) <> 0[kg]) then
								"bkg-cell"
							
							endif
						}
					}
					StringParameter sp_maximumContractFulfillmentAnnotation {
						IndexDomain: i_contract;
						Definition: {
							if (i_contract = ep_actualContract
							    and p_maximumContractFulfillment(ep_actualContract) = 0[kg]) then
								"bkg-cell-default"
							
							elseif (i_contract = ep_actualContract
							    and p_maximumContractFulfillment(ep_actualContract) <> 0[kg]) then
								"bkg-cell"
							
							endif
						}
					}
					StringParameter p_minimalDeliveryAnnotation {
						IndexDomain: i_producer;
						Definition: {
							if (i_producer = ep_actualProducer
							    and p_minimalDelivery(ep_actualProducer) = 0[kg]) then
								"bkg-cell-default"
							
							elseif (i_producer = ep_actualProducer
							    and p_minimalDelivery(ep_actualProducer) <> 0[kg]) then
								"bkg-cell"
							
							endif
						}
					}
					StringParameter p_availableCapacityAnnotation {
						IndexDomain: i_producer;
						Definition: {
							if (i_producer = ep_actualProducer
							    and p_availableCapacity(ep_actualProducer) = 0[kg]) then
								"bkg-cell-default"
							
							elseif (i_producer = ep_actualProducer
							    and p_availableCapacity(ep_actualProducer) <> 0[kg]) then
								"bkg-cell"
							
							endif
						}
					}
					StringParameter sp_productionCostAnnotation {
						IndexDomain: (i_producer, i_contract);
						Definition: {
							if (i_contract = ep_actualContract and i_producer = ep_actualProducer
							    and p_productionCost(ep_actualProducer, ep_actualContract) = 0[$/kg]) then
								"bkg-cell-default"
							
							elseif (i_contract = ep_actualContract and i_producer = ep_actualProducer
							    and p_productionCost(ep_actualProducer, ep_actualContract) <> 0[$/kg]) then
								"bkg-cell"
							
							endif
						}
					}
				}
				DeclarationSection Input_PageAction {
					StringParameter sp_inputSecondaryActions {
						IndexDomain: (webui::indexPageExtension,webui::indexPageActionSpec);
						Definition: {
							data 
							{ ( 1, displaytext ) : "Import"            ,  ( 1, icon        ) : "aimms-file-upload"  ,
							  ( 1, procedure   ) : "pr_importExcelData",  ( 1, state       ) : "active"            ,
							  ( 2, displaytext ) : "Solve"             ,  ( 2, icon        ) : "aimms-cog"         ,
							  ( 2, procedure   ) : "mainexecution"     ,  ( 2, state       ) : "active"             }
						}
					}
				}
				Section Import {
					Procedure pr_importExcelData {
						Body: {
							dex::AddMapping(
								mappingName :  "inputs", 
								mappingFile :  "Mappings/inputs.xml");
							
							dex::ReadFromFile(
								dataFile         :  "NothWesternStates.xlsx", 
								mappingName      :  "inputs", 
								emptyIdentifiers :  1, 
								emptySets        :  1, 
								resetCounters    :  1);
							
							ep_actualContract := first(i_contract);
							ep_actualProducer := first(i_producer);
						}
					}
				}
			}
			Section Results_Page {
				DeclarationSection Result_Side_Panel {
					StringParameter sp_resultsSidePanel {
						IndexDomain: (webui::indexPageExtension,webui::indexSidePanelSpec);
						Definition: {
							data 
							{ ( 1, displayText ) : "Model Information",  ( 1, pageId      ) : "model_information",
							  ( 1, icon        ) : "aimms-info"       ,  ( 1, state       ) : "active"            }
						}
					}
				}
				DeclarationSection Results_PageAction {
					StringParameter sp_resultsSecondaryActions {
						IndexDomain: (webui::indexPageExtension,webui::indexPageActionSpec);
						Definition: {
							data 
							{ ( 1, displaytext ) : "Export"            ,  ( 1, icon        ) : "aimms-file-download"  ,
							  ( 1, procedure   ) : "pr_openExportPage",  ( 1, state       ) : "active"            }
						}
					}
				}
				Procedure pr_openExportPage {
					Body: {
						!Generating all possible mappings
						dex::GenerateDatasetMappings();
						
						!Selecting the Excel mapping as initial value
						if not ep_selectedMapping then
						    ep_selectedMapping 
						    :=  First(i_generatedMappings | FindString(
						            SearchString  :  i_generatedMappings, 
						            Key           :  "excel", 
						            CaseSensitive :  0, 
						            WordOnly      :  0, 
						            IgnoreWhite   :  0));
						endif;
						
						!Defining Dialog and actions - Only done required
						s_actions:= data { Done };
						ep_pageId := 'export_page';
						
						!Opening dialog page - no action on done - webui::NoOp1 does nothing
						webui::OpenDialogPage(
							pageId  :  ep_pageId, 
							title   :  "Export Data", 
						    actions :  s_actions, 
							onDone  :  'webui::NoOp1');
					}
					Set s_actions;
					ElementParameter ep_pageId {
						Range: webui::AllDialogPages;
					}
				}
				Section Export {
					Procedure pr_exportExcelData {
						Arguments: (sp_out_fileLocation,p_out_statusCode,sp_out_statusDescription);
						Body: {
							! we want to download a file
							sp_out_fileLocation := sp_FileName;
							
							! we store the location of the file in string parameter FinalLocation
							sp_loc_FinalLocation := webui::GetIOFilePath(sp_out_fileLocation);
							
							! writing the output file locally
							dex::WriteToFile(
							    dataFile    :  sp_loc_FinalLocation, 
								mappingName :  ep_selectedMapping, 
								pretty      :  1);
							
							! checking if the previous write statement was successful or not
							if FileExists(sp_loc_FinalLocation) then
							
							   ! if successful, statusCode is set to 'CREATED' which will trigger the download widget to show the Get button
							   p_out_statusCode := webui::ReturnStatusCode('CREATED');
							   ! displaying the status message as Ready to download exported data! instead of the default "File ready to download"
							   sp_out_statusDescription := "Ready to download exported data!";
							
							else    !if previous write statement was not successful
							
							   ! setting the statusCode to 'ERROR' and the download widget will not show the Get button anymore
							   p_out_statusCode := webui::ReturnStatusCode('ERROR');
							   !displaying a custom error message
							   sp_out_statusDescription := "Something went wrong when creating the file.";
							
							endif;
						}
						StringParameter sp_out_fileLocation {
							Property: Output;
						}
						Parameter p_out_statusCode {
							Property: Output;
						}
						StringParameter sp_out_statusDescription {
							Property: Output;
						}
						StringParameter sp_loc_finalLocation;
					}
					DeclarationSection Export_Identifiers {
						Index i_contractExport {
							Range: s_contracts;
							Comment: "Used to define column name in export process";
							dex::ColumnName: Contract;
						}
						Index i_producerExport {
							Range: s_producers;
							Comment: "Used to define column name in export process";
							dex::ColumnName: Producer;
						}
						Parameter p_generation {
							IndexDomain: (i_producerExport, i_contractExport);
							Unit: kg;
							Definition: v_generation(i_producerExport, i_contractExport);
							dex::ColumnName: Generation;
							dex::Dataset: Export;
							dex::TableName: Allocation per Producer;
						}
						Parameter p_totalGeneration {
							IndexDomain: i_contractExport;
							Unit: kg;
							Definition: sum(i_producerExport, p_generation(i_producerExport, i_contractExport));
							dex::ColumnName: Total Generation;
							dex::Dataset: Export;
							dex::TableName: Contract Allocation;
						}
						Parameter p_disaggregatedCost {
							IndexDomain: (i_producer,i_contract);
							Unit: $;
							Definition: p_productionCost(i_producer,i_contract) * v_generation(i_producer,i_contract);
						}
					}
					DeclarationSection Export_Dialog {
						StringParameter sp_fileName {
							Default: "Your File Name Here.xlsx";
							Comment: "file name of exported data";
						}
						ElementParameter ep_selectedMapping {
							Range: s_generatedMappings;
							Default: '';
							Comment: "selected generated mapping for export";
						}
						Set s_generatedMappings {
							SubsetOf: dex::Mappings;
							Index: i_generatedMappings;
							Definition: {
								{dex::map | FindString(dex::map, "Generated/",CaseSensitive :  1, WordOnly      :  0)}
							}
							Comment: "all generated selected mappings";
						}
					}
				}
			}
		}
		Section FlagsIdentifier {
			StringParameter sp_readOnlyFlag {
				Definition: "readonly";
			}
		}
	}
	Procedure MainInitialization;
	Procedure PostMainInitialization {
		Comment: {
			"Add initialization statements here that require that the libraries are already initialized properly,
			or add statements that require the Data Management module to be initialized."
		}
	}
	Procedure MainExecution {
		Body: {
			if sum((i_producer, i_contract), p_productionCost(i_producer, i_contract)) then
			    if pro::GetPROEndPoint() then
				    if pro::management::IsRunningOnCloud() then
					    pro::solverlease::solveModel(
				            mathematicalProgrammingProblem :  'mp_contractAllocation', 
				            jobDescription                 :  "Contract Allocation");
			        endif;
			    else
			        solve mp_contractAllocation;
			    endif;
			    pr_modelInformation;
			else 
			    webui::RequestPerformWebUIDialog(
			        title   :  "Import First", 
			        message :  "You are trying to solve without any data, please import first.", 
			        actions :  s_loc_action,
			        onDone  : 'webui::NoOp1');   
			endif;
		}
		Set s_loc_action {
			InitialData: {
				{'ok'}
			}
		}
	}
	Procedure PreMainTermination {
		Body: {
			return DataManagementExit();
		}
		Comment: {
			"Add termination statements here that require all libraries to be still alive.
			Return 1 if you allow the termination sequence to continue.
			Return 0 if you want to cancel the termination sequence."
		}
	}
	Procedure MainTermination {
		Body: {
			return 1;
		}
		Comment: {
			"Add termination statements here that do not require all libraries to be still alive.
			Return 1 to allow the termination sequence to continue.
			Return 0 if you want to cancel the termination sequence.
			It is recommended to only use the procedure PreMainTermination to cancel the termination sequence and let this procedure always return 1."
		}
	}
}
